{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"#,odel 2 draft\n#L2 regularization/Ridge\nimport numpy as np\nimport pickle\n\nclass RidgeRegression:\n    def __init__(self, alpha=1.0, lr=0.01, epochs=1000):\n        self.alpha = alpha\n        self.lr = lr\n        self.epochs = epochs\n        self.weights = None\n        self.bias = None\n\n    def fit(self, X, y):\n        X = np.array(X)\n        y = np.array(y)\n        n_samples, n_features = X.shape\n\n        self.weights = np.zeros(n_features)\n        self.bias = 0\n\n        for _ in range(self.epochs):\n            y_pred = np.dot(X, self.weights) + self.bias\n            dw = (1/n_samples) * (np.dot(X.T, (y_pred - y)) + self.alpha * self.weights)\n            db = (1/n_samples) * np.sum(y_pred - y)\n\n            self.weights -= self.lr * dw\n            self.bias -= self.lr * db\n\n    def predict(self, X):\n        X = np.array(X)\n        return np.dot(X, self.weights) + self.bias\n","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}